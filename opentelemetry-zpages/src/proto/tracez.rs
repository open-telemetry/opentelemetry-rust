// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tracez.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct TracezCounts {
    // message fields
    pub spanname: ::std::string::String,
    pub latency: ::std::vec::Vec<u32>,
    pub running: u32,
    pub error: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TracezCounts {
    fn default() -> &'a TracezCounts {
        <TracezCounts as ::protobuf::Message>::default_instance()
    }
}

impl TracezCounts {
    pub fn new() -> TracezCounts {
        ::std::default::Default::default()
    }

    // string spanname = 1;


    pub fn get_spanname(&self) -> &str {
        &self.spanname
    }
    pub fn clear_spanname(&mut self) {
        self.spanname.clear();
    }

    // Param is passed by value, moved
    pub fn set_spanname(&mut self, v: ::std::string::String) {
        self.spanname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spanname(&mut self) -> &mut ::std::string::String {
        &mut self.spanname
    }

    // Take field
    pub fn take_spanname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spanname, ::std::string::String::new())
    }

    // repeated uint32 latency = 2;


    pub fn get_latency(&self) -> &[u32] {
        &self.latency
    }
    pub fn clear_latency(&mut self) {
        self.latency.clear();
    }

    // Param is passed by value, moved
    pub fn set_latency(&mut self, v: ::std::vec::Vec<u32>) {
        self.latency = v;
    }

    // Mutable pointer to the field.
    pub fn mut_latency(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.latency
    }

    // Take field
    pub fn take_latency(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.latency, ::std::vec::Vec::new())
    }

    // uint32 running = 3;


    pub fn get_running(&self) -> u32 {
        self.running
    }
    pub fn clear_running(&mut self) {
        self.running = 0;
    }

    // Param is passed by value, moved
    pub fn set_running(&mut self, v: u32) {
        self.running = v;
    }

    // uint32 error = 4;


    pub fn get_error(&self) -> u32 {
        self.error
    }
    pub fn clear_error(&mut self) {
        self.error = 0;
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: u32) {
        self.error = v;
    }
}

impl ::protobuf::Message for TracezCounts {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spanname)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.latency)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.running = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.error = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.spanname.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.spanname);
        }
        for value in &self.latency {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.running != 0 {
            my_size += ::protobuf::rt::value_size(3, self.running, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.error != 0 {
            my_size += ::protobuf::rt::value_size(4, self.error, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.spanname.is_empty() {
            os.write_string(1, &self.spanname)?;
        }
        for v in &self.latency {
            os.write_uint32(2, *v)?;
        };
        if self.running != 0 {
            os.write_uint32(3, self.running)?;
        }
        if self.error != 0 {
            os.write_uint32(4, self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TracezCounts {
        TracezCounts::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "spanname",
                |m: &TracezCounts| { &m.spanname },
                |m: &mut TracezCounts| { &mut m.spanname },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "latency",
                |m: &TracezCounts| { &m.latency },
                |m: &mut TracezCounts| { &mut m.latency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "running",
                |m: &TracezCounts| { &m.running },
                |m: &mut TracezCounts| { &mut m.running },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "error",
                |m: &TracezCounts| { &m.error },
                |m: &mut TracezCounts| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TracezCounts>(
                "TracezCounts",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TracezCounts {
        static instance: ::protobuf::rt::LazyV2<TracezCounts> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TracezCounts::new)
    }
}

impl ::protobuf::Clear for TracezCounts {
    fn clear(&mut self) {
        self.spanname.clear();
        self.latency.clear();
        self.running = 0;
        self.error = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TracezCounts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TracezCounts {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LatencyData {
    // message fields
    pub traceid: ::std::vec::Vec<u8>,
    pub spanid: ::std::vec::Vec<u8>,
    pub parentid: ::std::vec::Vec<u8>,
    pub starttime: u64,
    pub endtime: u64,
    pub attributes: ::protobuf::RepeatedField<super::common::KeyValue>,
    pub events: ::protobuf::RepeatedField<super::trace::Span_Event>,
    pub links: ::protobuf::RepeatedField<super::trace::Span_Link>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LatencyData {
    fn default() -> &'a LatencyData {
        <LatencyData as ::protobuf::Message>::default_instance()
    }
}

impl LatencyData {
    pub fn new() -> LatencyData {
        ::std::default::Default::default()
    }

    // bytes traceid = 1;


    pub fn get_traceid(&self) -> &[u8] {
        &self.traceid
    }
    pub fn clear_traceid(&mut self) {
        self.traceid.clear();
    }

    // Param is passed by value, moved
    pub fn set_traceid(&mut self, v: ::std::vec::Vec<u8>) {
        self.traceid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_traceid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.traceid
    }

    // Take field
    pub fn take_traceid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.traceid, ::std::vec::Vec::new())
    }

    // bytes spanid = 2;


    pub fn get_spanid(&self) -> &[u8] {
        &self.spanid
    }
    pub fn clear_spanid(&mut self) {
        self.spanid.clear();
    }

    // Param is passed by value, moved
    pub fn set_spanid(&mut self, v: ::std::vec::Vec<u8>) {
        self.spanid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spanid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.spanid
    }

    // Take field
    pub fn take_spanid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.spanid, ::std::vec::Vec::new())
    }

    // bytes parentid = 3;


    pub fn get_parentid(&self) -> &[u8] {
        &self.parentid
    }
    pub fn clear_parentid(&mut self) {
        self.parentid.clear();
    }

    // Param is passed by value, moved
    pub fn set_parentid(&mut self, v: ::std::vec::Vec<u8>) {
        self.parentid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parentid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parentid
    }

    // Take field
    pub fn take_parentid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parentid, ::std::vec::Vec::new())
    }

    // fixed64 starttime = 4;


    pub fn get_starttime(&self) -> u64 {
        self.starttime
    }
    pub fn clear_starttime(&mut self) {
        self.starttime = 0;
    }

    // Param is passed by value, moved
    pub fn set_starttime(&mut self, v: u64) {
        self.starttime = v;
    }

    // fixed64 endtime = 5;


    pub fn get_endtime(&self) -> u64 {
        self.endtime
    }
    pub fn clear_endtime(&mut self) {
        self.endtime = 0;
    }

    // Param is passed by value, moved
    pub fn set_endtime(&mut self, v: u64) {
        self.endtime = v;
    }

    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;


    pub fn get_attributes(&self) -> &[super::common::KeyValue] {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::protobuf::RepeatedField<super::common::KeyValue>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::protobuf::RepeatedField<super::common::KeyValue> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::protobuf::RepeatedField<super::common::KeyValue> {
        ::std::mem::replace(&mut self.attributes, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.trace.v1.Span.Event events = 7;


    pub fn get_events(&self) -> &[super::trace::Span_Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<super::trace::Span_Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<super::trace::Span_Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<super::trace::Span_Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.trace.v1.Span.Link links = 8;


    pub fn get_links(&self) -> &[super::trace::Span_Link] {
        &self.links
    }
    pub fn clear_links(&mut self) {
        self.links.clear();
    }

    // Param is passed by value, moved
    pub fn set_links(&mut self, v: ::protobuf::RepeatedField<super::trace::Span_Link>) {
        self.links = v;
    }

    // Mutable pointer to the field.
    pub fn mut_links(&mut self) -> &mut ::protobuf::RepeatedField<super::trace::Span_Link> {
        &mut self.links
    }

    // Take field
    pub fn take_links(&mut self) -> ::protobuf::RepeatedField<super::trace::Span_Link> {
        ::std::mem::replace(&mut self.links, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LatencyData {
    fn is_initialized(&self) -> bool {
        for v in &self.attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.links {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.traceid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.spanid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parentid)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.starttime = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.endtime = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attributes)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.links)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.traceid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.traceid);
        }
        if !self.spanid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.spanid);
        }
        if !self.parentid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.parentid);
        }
        if self.starttime != 0 {
            my_size += 9;
        }
        if self.endtime != 0 {
            my_size += 9;
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.links {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.traceid.is_empty() {
            os.write_bytes(1, &self.traceid)?;
        }
        if !self.spanid.is_empty() {
            os.write_bytes(2, &self.spanid)?;
        }
        if !self.parentid.is_empty() {
            os.write_bytes(3, &self.parentid)?;
        }
        if self.starttime != 0 {
            os.write_fixed64(4, self.starttime)?;
        }
        if self.endtime != 0 {
            os.write_fixed64(5, self.endtime)?;
        }
        for v in &self.attributes {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.events {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.links {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LatencyData {
        LatencyData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "traceid",
                |m: &LatencyData| { &m.traceid },
                |m: &mut LatencyData| { &mut m.traceid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "spanid",
                |m: &LatencyData| { &m.spanid },
                |m: &mut LatencyData| { &mut m.spanid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "parentid",
                |m: &LatencyData| { &m.parentid },
                |m: &mut LatencyData| { &mut m.parentid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "starttime",
                |m: &LatencyData| { &m.starttime },
                |m: &mut LatencyData| { &mut m.starttime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "endtime",
                |m: &LatencyData| { &m.endtime },
                |m: &mut LatencyData| { &mut m.endtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::KeyValue>>(
                "attributes",
                |m: &LatencyData| { &m.attributes },
                |m: &mut LatencyData| { &mut m.attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace::Span_Event>>(
                "events",
                |m: &LatencyData| { &m.events },
                |m: &mut LatencyData| { &mut m.events },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace::Span_Link>>(
                "links",
                |m: &LatencyData| { &m.links },
                |m: &mut LatencyData| { &mut m.links },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LatencyData>(
                "LatencyData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LatencyData {
        static instance: ::protobuf::rt::LazyV2<LatencyData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LatencyData::new)
    }
}

impl ::protobuf::Clear for LatencyData {
    fn clear(&mut self) {
        self.traceid.clear();
        self.spanid.clear();
        self.parentid.clear();
        self.starttime = 0;
        self.endtime = 0;
        self.attributes.clear();
        self.events.clear();
        self.links.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LatencyData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LatencyData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RunningData {
    // message fields
    pub traceid: ::std::vec::Vec<u8>,
    pub spanid: ::std::vec::Vec<u8>,
    pub parentid: ::std::vec::Vec<u8>,
    pub starttime: u64,
    pub attributes: ::protobuf::RepeatedField<super::common::KeyValue>,
    pub events: ::protobuf::RepeatedField<super::trace::Span_Event>,
    pub links: ::protobuf::RepeatedField<super::trace::Span_Link>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunningData {
    fn default() -> &'a RunningData {
        <RunningData as ::protobuf::Message>::default_instance()
    }
}

impl RunningData {
    pub fn new() -> RunningData {
        ::std::default::Default::default()
    }

    // bytes traceid = 1;


    pub fn get_traceid(&self) -> &[u8] {
        &self.traceid
    }
    pub fn clear_traceid(&mut self) {
        self.traceid.clear();
    }

    // Param is passed by value, moved
    pub fn set_traceid(&mut self, v: ::std::vec::Vec<u8>) {
        self.traceid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_traceid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.traceid
    }

    // Take field
    pub fn take_traceid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.traceid, ::std::vec::Vec::new())
    }

    // bytes spanid = 2;


    pub fn get_spanid(&self) -> &[u8] {
        &self.spanid
    }
    pub fn clear_spanid(&mut self) {
        self.spanid.clear();
    }

    // Param is passed by value, moved
    pub fn set_spanid(&mut self, v: ::std::vec::Vec<u8>) {
        self.spanid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spanid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.spanid
    }

    // Take field
    pub fn take_spanid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.spanid, ::std::vec::Vec::new())
    }

    // bytes parentid = 3;


    pub fn get_parentid(&self) -> &[u8] {
        &self.parentid
    }
    pub fn clear_parentid(&mut self) {
        self.parentid.clear();
    }

    // Param is passed by value, moved
    pub fn set_parentid(&mut self, v: ::std::vec::Vec<u8>) {
        self.parentid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parentid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parentid
    }

    // Take field
    pub fn take_parentid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parentid, ::std::vec::Vec::new())
    }

    // fixed64 starttime = 4;


    pub fn get_starttime(&self) -> u64 {
        self.starttime
    }
    pub fn clear_starttime(&mut self) {
        self.starttime = 0;
    }

    // Param is passed by value, moved
    pub fn set_starttime(&mut self, v: u64) {
        self.starttime = v;
    }

    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 5;


    pub fn get_attributes(&self) -> &[super::common::KeyValue] {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::protobuf::RepeatedField<super::common::KeyValue>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::protobuf::RepeatedField<super::common::KeyValue> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::protobuf::RepeatedField<super::common::KeyValue> {
        ::std::mem::replace(&mut self.attributes, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.trace.v1.Span.Event events = 6;


    pub fn get_events(&self) -> &[super::trace::Span_Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<super::trace::Span_Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<super::trace::Span_Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<super::trace::Span_Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.trace.v1.Span.Link links = 7;


    pub fn get_links(&self) -> &[super::trace::Span_Link] {
        &self.links
    }
    pub fn clear_links(&mut self) {
        self.links.clear();
    }

    // Param is passed by value, moved
    pub fn set_links(&mut self, v: ::protobuf::RepeatedField<super::trace::Span_Link>) {
        self.links = v;
    }

    // Mutable pointer to the field.
    pub fn mut_links(&mut self) -> &mut ::protobuf::RepeatedField<super::trace::Span_Link> {
        &mut self.links
    }

    // Take field
    pub fn take_links(&mut self) -> ::protobuf::RepeatedField<super::trace::Span_Link> {
        ::std::mem::replace(&mut self.links, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RunningData {
    fn is_initialized(&self) -> bool {
        for v in &self.attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.links {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.traceid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.spanid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parentid)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.starttime = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attributes)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.links)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.traceid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.traceid);
        }
        if !self.spanid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.spanid);
        }
        if !self.parentid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.parentid);
        }
        if self.starttime != 0 {
            my_size += 9;
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.links {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.traceid.is_empty() {
            os.write_bytes(1, &self.traceid)?;
        }
        if !self.spanid.is_empty() {
            os.write_bytes(2, &self.spanid)?;
        }
        if !self.parentid.is_empty() {
            os.write_bytes(3, &self.parentid)?;
        }
        if self.starttime != 0 {
            os.write_fixed64(4, self.starttime)?;
        }
        for v in &self.attributes {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.events {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.links {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunningData {
        RunningData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "traceid",
                |m: &RunningData| { &m.traceid },
                |m: &mut RunningData| { &mut m.traceid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "spanid",
                |m: &RunningData| { &m.spanid },
                |m: &mut RunningData| { &mut m.spanid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "parentid",
                |m: &RunningData| { &m.parentid },
                |m: &mut RunningData| { &mut m.parentid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "starttime",
                |m: &RunningData| { &m.starttime },
                |m: &mut RunningData| { &mut m.starttime },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::KeyValue>>(
                "attributes",
                |m: &RunningData| { &m.attributes },
                |m: &mut RunningData| { &mut m.attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace::Span_Event>>(
                "events",
                |m: &RunningData| { &m.events },
                |m: &mut RunningData| { &mut m.events },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace::Span_Link>>(
                "links",
                |m: &RunningData| { &m.links },
                |m: &mut RunningData| { &mut m.links },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunningData>(
                "RunningData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunningData {
        static instance: ::protobuf::rt::LazyV2<RunningData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunningData::new)
    }
}

impl ::protobuf::Clear for RunningData {
    fn clear(&mut self) {
        self.traceid.clear();
        self.spanid.clear();
        self.parentid.clear();
        self.starttime = 0;
        self.attributes.clear();
        self.events.clear();
        self.links.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunningData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunningData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ErrorData {
    // message fields
    pub traceid: ::std::vec::Vec<u8>,
    pub spanid: ::std::vec::Vec<u8>,
    pub parentid: ::std::vec::Vec<u8>,
    pub starttime: u64,
    pub attributes: ::protobuf::RepeatedField<super::common::KeyValue>,
    pub events: ::protobuf::RepeatedField<super::trace::Span_Event>,
    pub links: ::protobuf::RepeatedField<super::trace::Span_Link>,
    pub status: ::protobuf::SingularPtrField<super::trace::Status>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ErrorData {
    fn default() -> &'a ErrorData {
        <ErrorData as ::protobuf::Message>::default_instance()
    }
}

impl ErrorData {
    pub fn new() -> ErrorData {
        ::std::default::Default::default()
    }

    // bytes traceid = 1;


    pub fn get_traceid(&self) -> &[u8] {
        &self.traceid
    }
    pub fn clear_traceid(&mut self) {
        self.traceid.clear();
    }

    // Param is passed by value, moved
    pub fn set_traceid(&mut self, v: ::std::vec::Vec<u8>) {
        self.traceid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_traceid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.traceid
    }

    // Take field
    pub fn take_traceid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.traceid, ::std::vec::Vec::new())
    }

    // bytes spanid = 2;


    pub fn get_spanid(&self) -> &[u8] {
        &self.spanid
    }
    pub fn clear_spanid(&mut self) {
        self.spanid.clear();
    }

    // Param is passed by value, moved
    pub fn set_spanid(&mut self, v: ::std::vec::Vec<u8>) {
        self.spanid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spanid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.spanid
    }

    // Take field
    pub fn take_spanid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.spanid, ::std::vec::Vec::new())
    }

    // bytes parentid = 3;


    pub fn get_parentid(&self) -> &[u8] {
        &self.parentid
    }
    pub fn clear_parentid(&mut self) {
        self.parentid.clear();
    }

    // Param is passed by value, moved
    pub fn set_parentid(&mut self, v: ::std::vec::Vec<u8>) {
        self.parentid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parentid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parentid
    }

    // Take field
    pub fn take_parentid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parentid, ::std::vec::Vec::new())
    }

    // fixed64 starttime = 4;


    pub fn get_starttime(&self) -> u64 {
        self.starttime
    }
    pub fn clear_starttime(&mut self) {
        self.starttime = 0;
    }

    // Param is passed by value, moved
    pub fn set_starttime(&mut self, v: u64) {
        self.starttime = v;
    }

    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 5;


    pub fn get_attributes(&self) -> &[super::common::KeyValue] {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::protobuf::RepeatedField<super::common::KeyValue>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::protobuf::RepeatedField<super::common::KeyValue> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::protobuf::RepeatedField<super::common::KeyValue> {
        ::std::mem::replace(&mut self.attributes, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.trace.v1.Span.Event events = 6;


    pub fn get_events(&self) -> &[super::trace::Span_Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<super::trace::Span_Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<super::trace::Span_Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<super::trace::Span_Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.trace.v1.Span.Link links = 7;


    pub fn get_links(&self) -> &[super::trace::Span_Link] {
        &self.links
    }
    pub fn clear_links(&mut self) {
        self.links.clear();
    }

    // Param is passed by value, moved
    pub fn set_links(&mut self, v: ::protobuf::RepeatedField<super::trace::Span_Link>) {
        self.links = v;
    }

    // Mutable pointer to the field.
    pub fn mut_links(&mut self) -> &mut ::protobuf::RepeatedField<super::trace::Span_Link> {
        &mut self.links
    }

    // Take field
    pub fn take_links(&mut self) -> ::protobuf::RepeatedField<super::trace::Span_Link> {
        ::std::mem::replace(&mut self.links, ::protobuf::RepeatedField::new())
    }

    // .opentelemetry.proto.trace.v1.Status status = 8;


    pub fn get_status(&self) -> &super::trace::Status {
        self.status.as_ref().unwrap_or_else(|| <super::trace::Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::trace::Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::trace::Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::trace::Status {
        self.status.take().unwrap_or_else(|| super::trace::Status::new())
    }
}

impl ::protobuf::Message for ErrorData {
    fn is_initialized(&self) -> bool {
        for v in &self.attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.links {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.traceid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.spanid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parentid)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.starttime = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attributes)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.links)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.traceid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.traceid);
        }
        if !self.spanid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.spanid);
        }
        if !self.parentid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.parentid);
        }
        if self.starttime != 0 {
            my_size += 9;
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.links {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.traceid.is_empty() {
            os.write_bytes(1, &self.traceid)?;
        }
        if !self.spanid.is_empty() {
            os.write_bytes(2, &self.spanid)?;
        }
        if !self.parentid.is_empty() {
            os.write_bytes(3, &self.parentid)?;
        }
        if self.starttime != 0 {
            os.write_fixed64(4, self.starttime)?;
        }
        for v in &self.attributes {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.events {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.links {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ErrorData {
        ErrorData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "traceid",
                |m: &ErrorData| { &m.traceid },
                |m: &mut ErrorData| { &mut m.traceid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "spanid",
                |m: &ErrorData| { &m.spanid },
                |m: &mut ErrorData| { &mut m.spanid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "parentid",
                |m: &ErrorData| { &m.parentid },
                |m: &mut ErrorData| { &mut m.parentid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "starttime",
                |m: &ErrorData| { &m.starttime },
                |m: &mut ErrorData| { &mut m.starttime },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::KeyValue>>(
                "attributes",
                |m: &ErrorData| { &m.attributes },
                |m: &mut ErrorData| { &mut m.attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace::Span_Event>>(
                "events",
                |m: &ErrorData| { &m.events },
                |m: &mut ErrorData| { &mut m.events },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace::Span_Link>>(
                "links",
                |m: &ErrorData| { &m.links },
                |m: &mut ErrorData| { &mut m.links },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace::Status>>(
                "status",
                |m: &ErrorData| { &m.status },
                |m: &mut ErrorData| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ErrorData>(
                "ErrorData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ErrorData {
        static instance: ::protobuf::rt::LazyV2<ErrorData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ErrorData::new)
    }
}

impl ::protobuf::Clear for ErrorData {
    fn clear(&mut self) {
        self.traceid.clear();
        self.spanid.clear();
        self.parentid.clear();
        self.starttime = 0;
        self.attributes.clear();
        self.events.clear();
        self.links.clear();
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ErrorData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ctracez.proto\x1a*opentelemetry/proto/common/v1/common.proto\x1a.op\
    entelemetry/proto/resource/v1/resource.proto\x1a(opentelemetry/proto/tra\
    ce/v1/trace.proto\"t\n\x0cTracezCounts\x12\x1a\n\x08spanname\x18\x01\x20\
    \x01(\tR\x08spanname\x12\x18\n\x07latency\x18\x02\x20\x03(\rR\x07latency\
    \x12\x18\n\x07running\x18\x03\x20\x01(\rR\x07running\x12\x14\n\x05error\
    \x18\x04\x20\x01(\rR\x05error\"\xdd\x02\n\x0bLatencyData\x12\x18\n\x07tr\
    aceid\x18\x01\x20\x01(\x0cR\x07traceid\x12\x16\n\x06spanid\x18\x02\x20\
    \x01(\x0cR\x06spanid\x12\x1a\n\x08parentid\x18\x03\x20\x01(\x0cR\x08pare\
    ntid\x12\x1c\n\tstarttime\x18\x04\x20\x01(\x06R\tstarttime\x12\x18\n\x07\
    endtime\x18\x05\x20\x01(\x06R\x07endtime\x12G\n\nattributes\x18\x06\x20\
    \x03(\x0b2'.opentelemetry.proto.common.v1.KeyValueR\nattributes\x12@\n\
    \x06events\x18\x07\x20\x03(\x0b2(.opentelemetry.proto.trace.v1.Span.Even\
    tR\x06events\x12=\n\x05links\x18\x08\x20\x03(\x0b2'.opentelemetry.proto.\
    trace.v1.Span.LinkR\x05links\"\xc3\x02\n\x0bRunningData\x12\x18\n\x07tra\
    ceid\x18\x01\x20\x01(\x0cR\x07traceid\x12\x16\n\x06spanid\x18\x02\x20\
    \x01(\x0cR\x06spanid\x12\x1a\n\x08parentid\x18\x03\x20\x01(\x0cR\x08pare\
    ntid\x12\x1c\n\tstarttime\x18\x04\x20\x01(\x06R\tstarttime\x12G\n\nattri\
    butes\x18\x05\x20\x03(\x0b2'.opentelemetry.proto.common.v1.KeyValueR\nat\
    tributes\x12@\n\x06events\x18\x06\x20\x03(\x0b2(.opentelemetry.proto.tra\
    ce.v1.Span.EventR\x06events\x12=\n\x05links\x18\x07\x20\x03(\x0b2'.opent\
    elemetry.proto.trace.v1.Span.LinkR\x05links\"\xff\x02\n\tErrorData\x12\
    \x18\n\x07traceid\x18\x01\x20\x01(\x0cR\x07traceid\x12\x16\n\x06spanid\
    \x18\x02\x20\x01(\x0cR\x06spanid\x12\x1a\n\x08parentid\x18\x03\x20\x01(\
    \x0cR\x08parentid\x12\x1c\n\tstarttime\x18\x04\x20\x01(\x06R\tstarttime\
    \x12G\n\nattributes\x18\x05\x20\x03(\x0b2'.opentelemetry.proto.common.v1\
    .KeyValueR\nattributes\x12@\n\x06events\x18\x06\x20\x03(\x0b2(.opentelem\
    etry.proto.trace.v1.Span.EventR\x06events\x12=\n\x05links\x18\x07\x20\
    \x03(\x0b2'.opentelemetry.proto.trace.v1.Span.LinkR\x05links\x12<\n\x06s\
    tatus\x18\x08\x20\x01(\x0b2$.opentelemetry.proto.trace.v1.StatusR\x06sta\
    tusb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
