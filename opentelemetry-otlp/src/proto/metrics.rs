// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `opentelemetry/proto/metrics/v1/metrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ResourceMetrics {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::resource::Resource>,
    pub instrumentation_library_metrics: ::protobuf::RepeatedField<InstrumentationLibraryMetrics>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceMetrics {
    fn default() -> &'a ResourceMetrics {
        <ResourceMetrics as ::protobuf::Message>::default_instance()
    }
}

impl ResourceMetrics {
    pub fn new() -> ResourceMetrics {
        ::std::default::Default::default()
    }

    // .opentelemetry.proto.resource.v1.Resource resource = 1;


    pub fn get_resource(&self) -> &super::resource::Resource {
        self.resource.as_ref().unwrap_or_else(|| <super::resource::Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::resource::Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::resource::Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::resource::Resource {
        self.resource.take().unwrap_or_else(|| super::resource::Resource::new())
    }

    // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;


    pub fn get_instrumentation_library_metrics(&self) -> &[InstrumentationLibraryMetrics] {
        &self.instrumentation_library_metrics
    }
    pub fn clear_instrumentation_library_metrics(&mut self) {
        self.instrumentation_library_metrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_instrumentation_library_metrics(&mut self, v: ::protobuf::RepeatedField<InstrumentationLibraryMetrics>) {
        self.instrumentation_library_metrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instrumentation_library_metrics(&mut self) -> &mut ::protobuf::RepeatedField<InstrumentationLibraryMetrics> {
        &mut self.instrumentation_library_metrics
    }

    // Take field
    pub fn take_instrumentation_library_metrics(&mut self) -> ::protobuf::RepeatedField<InstrumentationLibraryMetrics> {
        ::std::mem::replace(&mut self.instrumentation_library_metrics, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ResourceMetrics {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.instrumentation_library_metrics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instrumentation_library_metrics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.instrumentation_library_metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.instrumentation_library_metrics {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceMetrics {
        ResourceMetrics::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::resource::Resource>>(
                "resource",
                |m: &ResourceMetrics| { &m.resource },
                |m: &mut ResourceMetrics| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstrumentationLibraryMetrics>>(
                "instrumentation_library_metrics",
                |m: &ResourceMetrics| { &m.instrumentation_library_metrics },
                |m: &mut ResourceMetrics| { &mut m.instrumentation_library_metrics },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceMetrics>(
                "ResourceMetrics",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceMetrics {
        static instance: ::protobuf::rt::LazyV2<ResourceMetrics> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceMetrics::new)
    }
}

impl ::protobuf::Clear for ResourceMetrics {
    fn clear(&mut self) {
        self.resource.clear();
        self.instrumentation_library_metrics.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceMetrics {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct InstrumentationLibraryMetrics {
    // message fields
    pub instrumentation_library: ::protobuf::SingularPtrField<super::common::InstrumentationLibrary>,
    pub metrics: ::protobuf::RepeatedField<Metric>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstrumentationLibraryMetrics {
    fn default() -> &'a InstrumentationLibraryMetrics {
        <InstrumentationLibraryMetrics as ::protobuf::Message>::default_instance()
    }
}

impl InstrumentationLibraryMetrics {
    pub fn new() -> InstrumentationLibraryMetrics {
        ::std::default::Default::default()
    }

    // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;


    pub fn get_instrumentation_library(&self) -> &super::common::InstrumentationLibrary {
        self.instrumentation_library.as_ref().unwrap_or_else(|| <super::common::InstrumentationLibrary as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instrumentation_library(&mut self) {
        self.instrumentation_library.clear();
    }

    pub fn has_instrumentation_library(&self) -> bool {
        self.instrumentation_library.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instrumentation_library(&mut self, v: super::common::InstrumentationLibrary) {
        self.instrumentation_library = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instrumentation_library(&mut self) -> &mut super::common::InstrumentationLibrary {
        if self.instrumentation_library.is_none() {
            self.instrumentation_library.set_default();
        }
        self.instrumentation_library.as_mut().unwrap()
    }

    // Take field
    pub fn take_instrumentation_library(&mut self) -> super::common::InstrumentationLibrary {
        self.instrumentation_library.take().unwrap_or_else(|| super::common::InstrumentationLibrary::new())
    }

    // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;


    pub fn get_metrics(&self) -> &[Metric] {
        &self.metrics
    }
    pub fn clear_metrics(&mut self) {
        self.metrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_metrics(&mut self, v: ::protobuf::RepeatedField<Metric>) {
        self.metrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metrics(&mut self) -> &mut ::protobuf::RepeatedField<Metric> {
        &mut self.metrics
    }

    // Take field
    pub fn take_metrics(&mut self) -> ::protobuf::RepeatedField<Metric> {
        ::std::mem::replace(&mut self.metrics, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for InstrumentationLibraryMetrics {
    fn is_initialized(&self) -> bool {
        for v in &self.instrumentation_library {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metrics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instrumentation_library)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.metrics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instrumentation_library.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instrumentation_library.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.metrics {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstrumentationLibraryMetrics {
        InstrumentationLibraryMetrics::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::InstrumentationLibrary>>(
                "instrumentation_library",
                |m: &InstrumentationLibraryMetrics| { &m.instrumentation_library },
                |m: &mut InstrumentationLibraryMetrics| { &mut m.instrumentation_library },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Metric>>(
                "metrics",
                |m: &InstrumentationLibraryMetrics| { &m.metrics },
                |m: &mut InstrumentationLibraryMetrics| { &mut m.metrics },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstrumentationLibraryMetrics>(
                "InstrumentationLibraryMetrics",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstrumentationLibraryMetrics {
        static instance: ::protobuf::rt::LazyV2<InstrumentationLibraryMetrics> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstrumentationLibraryMetrics::new)
    }
}

impl ::protobuf::Clear for InstrumentationLibraryMetrics {
    fn clear(&mut self) {
        self.instrumentation_library.clear();
        self.metrics.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstrumentationLibraryMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstrumentationLibraryMetrics {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Metric {
    // message fields
    pub metric_descriptor: ::protobuf::SingularPtrField<MetricDescriptor>,
    pub int64_data_points: ::protobuf::RepeatedField<Int64DataPoint>,
    pub double_data_points: ::protobuf::RepeatedField<DoubleDataPoint>,
    pub histogram_data_points: ::protobuf::RepeatedField<HistogramDataPoint>,
    pub summary_data_points: ::protobuf::RepeatedField<SummaryDataPoint>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    // .opentelemetry.proto.metrics.v1.MetricDescriptor metric_descriptor = 1;


    pub fn get_metric_descriptor(&self) -> &MetricDescriptor {
        self.metric_descriptor.as_ref().unwrap_or_else(|| <MetricDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metric_descriptor(&mut self) {
        self.metric_descriptor.clear();
    }

    pub fn has_metric_descriptor(&self) -> bool {
        self.metric_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric_descriptor(&mut self, v: MetricDescriptor) {
        self.metric_descriptor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_descriptor(&mut self) -> &mut MetricDescriptor {
        if self.metric_descriptor.is_none() {
            self.metric_descriptor.set_default();
        }
        self.metric_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_metric_descriptor(&mut self) -> MetricDescriptor {
        self.metric_descriptor.take().unwrap_or_else(|| MetricDescriptor::new())
    }

    // repeated .opentelemetry.proto.metrics.v1.Int64DataPoint int64_data_points = 2;


    pub fn get_int64_data_points(&self) -> &[Int64DataPoint] {
        &self.int64_data_points
    }
    pub fn clear_int64_data_points(&mut self) {
        self.int64_data_points.clear();
    }

    // Param is passed by value, moved
    pub fn set_int64_data_points(&mut self, v: ::protobuf::RepeatedField<Int64DataPoint>) {
        self.int64_data_points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_int64_data_points(&mut self) -> &mut ::protobuf::RepeatedField<Int64DataPoint> {
        &mut self.int64_data_points
    }

    // Take field
    pub fn take_int64_data_points(&mut self) -> ::protobuf::RepeatedField<Int64DataPoint> {
        ::std::mem::replace(&mut self.int64_data_points, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint double_data_points = 3;


    pub fn get_double_data_points(&self) -> &[DoubleDataPoint] {
        &self.double_data_points
    }
    pub fn clear_double_data_points(&mut self) {
        self.double_data_points.clear();
    }

    // Param is passed by value, moved
    pub fn set_double_data_points(&mut self, v: ::protobuf::RepeatedField<DoubleDataPoint>) {
        self.double_data_points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_double_data_points(&mut self) -> &mut ::protobuf::RepeatedField<DoubleDataPoint> {
        &mut self.double_data_points
    }

    // Take field
    pub fn take_double_data_points(&mut self) -> ::protobuf::RepeatedField<DoubleDataPoint> {
        ::std::mem::replace(&mut self.double_data_points, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint histogram_data_points = 4;


    pub fn get_histogram_data_points(&self) -> &[HistogramDataPoint] {
        &self.histogram_data_points
    }
    pub fn clear_histogram_data_points(&mut self) {
        self.histogram_data_points.clear();
    }

    // Param is passed by value, moved
    pub fn set_histogram_data_points(&mut self, v: ::protobuf::RepeatedField<HistogramDataPoint>) {
        self.histogram_data_points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_histogram_data_points(&mut self) -> &mut ::protobuf::RepeatedField<HistogramDataPoint> {
        &mut self.histogram_data_points
    }

    // Take field
    pub fn take_histogram_data_points(&mut self) -> ::protobuf::RepeatedField<HistogramDataPoint> {
        ::std::mem::replace(&mut self.histogram_data_points, ::protobuf::RepeatedField::new())
    }

    // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint summary_data_points = 5;


    pub fn get_summary_data_points(&self) -> &[SummaryDataPoint] {
        &self.summary_data_points
    }
    pub fn clear_summary_data_points(&mut self) {
        self.summary_data_points.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary_data_points(&mut self, v: ::protobuf::RepeatedField<SummaryDataPoint>) {
        self.summary_data_points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_summary_data_points(&mut self) -> &mut ::protobuf::RepeatedField<SummaryDataPoint> {
        &mut self.summary_data_points
    }

    // Take field
    pub fn take_summary_data_points(&mut self) -> ::protobuf::RepeatedField<SummaryDataPoint> {
        ::std::mem::replace(&mut self.summary_data_points, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Metric {
    fn is_initialized(&self) -> bool {
        for v in &self.metric_descriptor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.int64_data_points {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.double_data_points {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.histogram_data_points {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.summary_data_points {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metric_descriptor)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.int64_data_points)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.double_data_points)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.histogram_data_points)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.summary_data_points)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.metric_descriptor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.int64_data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.double_data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.histogram_data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.summary_data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.metric_descriptor.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.int64_data_points {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.double_data_points {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.histogram_data_points {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.summary_data_points {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MetricDescriptor>>(
                "metric_descriptor",
                |m: &Metric| { &m.metric_descriptor },
                |m: &mut Metric| { &mut m.metric_descriptor },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Int64DataPoint>>(
                "int64_data_points",
                |m: &Metric| { &m.int64_data_points },
                |m: &mut Metric| { &mut m.int64_data_points },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DoubleDataPoint>>(
                "double_data_points",
                |m: &Metric| { &m.double_data_points },
                |m: &mut Metric| { &mut m.double_data_points },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HistogramDataPoint>>(
                "histogram_data_points",
                |m: &Metric| { &m.histogram_data_points },
                |m: &mut Metric| { &mut m.histogram_data_points },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SummaryDataPoint>>(
                "summary_data_points",
                |m: &Metric| { &m.summary_data_points },
                |m: &mut Metric| { &mut m.summary_data_points },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metric>(
                "Metric",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metric {
        static instance: ::protobuf::rt::LazyV2<Metric> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metric::new)
    }
}

impl ::protobuf::Clear for Metric {
    fn clear(&mut self) {
        self.metric_descriptor.clear();
        self.int64_data_points.clear();
        self.double_data_points.clear();
        self.histogram_data_points.clear();
        self.summary_data_points.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct MetricDescriptor {
    // message fields
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub unit: ::std::string::String,
    pub field_type: MetricDescriptor_Type,
    pub temporality: MetricDescriptor_Temporality,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricDescriptor {
    fn default() -> &'a MetricDescriptor {
        <MetricDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl MetricDescriptor {
    pub fn new() -> MetricDescriptor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string unit = 3;


    pub fn get_unit(&self) -> &str {
        &self.unit
    }
    pub fn clear_unit(&mut self) {
        self.unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: ::std::string::String) {
        self.unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unit(&mut self) -> &mut ::std::string::String {
        &mut self.unit
    }

    // Take field
    pub fn take_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unit, ::std::string::String::new())
    }

    // .opentelemetry.proto.metrics.v1.MetricDescriptor.Type type = 4;


    pub fn get_field_type(&self) -> MetricDescriptor_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = MetricDescriptor_Type::INVALID_TYPE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: MetricDescriptor_Type) {
        self.field_type = v;
    }

    // .opentelemetry.proto.metrics.v1.MetricDescriptor.Temporality temporality = 5;


    pub fn get_temporality(&self) -> MetricDescriptor_Temporality {
        self.temporality
    }
    pub fn clear_temporality(&mut self) {
        self.temporality = MetricDescriptor_Temporality::INVALID_TEMPORALITY;
    }

    // Param is passed by value, moved
    pub fn set_temporality(&mut self, v: MetricDescriptor_Temporality) {
        self.temporality = v;
    }
}

impl ::protobuf::Message for MetricDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unit)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.temporality, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.unit);
        }
        if self.field_type != MetricDescriptor_Type::INVALID_TYPE {
            my_size += ::protobuf::rt::enum_size(4, self.field_type);
        }
        if self.temporality != MetricDescriptor_Temporality::INVALID_TEMPORALITY {
            my_size += ::protobuf::rt::enum_size(5, self.temporality);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.unit.is_empty() {
            os.write_string(3, &self.unit)?;
        }
        if self.field_type != MetricDescriptor_Type::INVALID_TYPE {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.temporality != MetricDescriptor_Temporality::INVALID_TEMPORALITY {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.temporality))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricDescriptor {
        MetricDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &MetricDescriptor| { &m.name },
                |m: &mut MetricDescriptor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &MetricDescriptor| { &m.description },
                |m: &mut MetricDescriptor| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unit",
                |m: &MetricDescriptor| { &m.unit },
                |m: &mut MetricDescriptor| { &mut m.unit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_Type>>(
                "type",
                |m: &MetricDescriptor| { &m.field_type },
                |m: &mut MetricDescriptor| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_Temporality>>(
                "temporality",
                |m: &MetricDescriptor| { &m.temporality },
                |m: &mut MetricDescriptor| { &mut m.temporality },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetricDescriptor>(
                "MetricDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetricDescriptor {
        static instance: ::protobuf::rt::LazyV2<MetricDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetricDescriptor::new)
    }
}

impl ::protobuf::Clear for MetricDescriptor {
    fn clear(&mut self) {
        self.name.clear();
        self.description.clear();
        self.unit.clear();
        self.field_type = MetricDescriptor_Type::INVALID_TYPE;
        self.temporality = MetricDescriptor_Temporality::INVALID_TEMPORALITY;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum MetricDescriptor_Type {
    INVALID_TYPE = 0,
    INT64 = 1,
    MONOTONIC_INT64 = 2,
    DOUBLE = 3,
    MONOTONIC_DOUBLE = 4,
    HISTOGRAM = 5,
    SUMMARY = 6,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_Type> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_Type::INVALID_TYPE),
            1 => ::std::option::Option::Some(MetricDescriptor_Type::INT64),
            2 => ::std::option::Option::Some(MetricDescriptor_Type::MONOTONIC_INT64),
            3 => ::std::option::Option::Some(MetricDescriptor_Type::DOUBLE),
            4 => ::std::option::Option::Some(MetricDescriptor_Type::MONOTONIC_DOUBLE),
            5 => ::std::option::Option::Some(MetricDescriptor_Type::HISTOGRAM),
            6 => ::std::option::Option::Some(MetricDescriptor_Type::SUMMARY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_Type] = &[
            MetricDescriptor_Type::INVALID_TYPE,
            MetricDescriptor_Type::INT64,
            MetricDescriptor_Type::MONOTONIC_INT64,
            MetricDescriptor_Type::DOUBLE,
            MetricDescriptor_Type::MONOTONIC_DOUBLE,
            MetricDescriptor_Type::HISTOGRAM,
            MetricDescriptor_Type::SUMMARY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MetricDescriptor_Type>("MetricDescriptor.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MetricDescriptor_Type {
}

impl ::std::default::Default for MetricDescriptor_Type {
    fn default() -> Self {
        MetricDescriptor_Type::INVALID_TYPE
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum MetricDescriptor_Temporality {
    INVALID_TEMPORALITY = 0,
    INSTANTANEOUS = 1,
    DELTA = 2,
    CUMULATIVE = 3,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_Temporality {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_Temporality> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_Temporality::INVALID_TEMPORALITY),
            1 => ::std::option::Option::Some(MetricDescriptor_Temporality::INSTANTANEOUS),
            2 => ::std::option::Option::Some(MetricDescriptor_Temporality::DELTA),
            3 => ::std::option::Option::Some(MetricDescriptor_Temporality::CUMULATIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_Temporality] = &[
            MetricDescriptor_Temporality::INVALID_TEMPORALITY,
            MetricDescriptor_Temporality::INSTANTANEOUS,
            MetricDescriptor_Temporality::DELTA,
            MetricDescriptor_Temporality::CUMULATIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MetricDescriptor_Temporality>("MetricDescriptor.Temporality", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MetricDescriptor_Temporality {
}

impl ::std::default::Default for MetricDescriptor_Temporality {
    fn default() -> Self {
        MetricDescriptor_Temporality::INVALID_TEMPORALITY
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_Temporality {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Int64DataPoint {
    // message fields
    pub labels: ::protobuf::RepeatedField<super::common::StringKeyValue>,
    pub start_time_unix_nano: u64,
    pub time_unix_nano: u64,
    pub value: i64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Int64DataPoint {
    fn default() -> &'a Int64DataPoint {
        <Int64DataPoint as ::protobuf::Message>::default_instance()
    }
}

impl Int64DataPoint {
    pub fn new() -> Int64DataPoint {
        ::std::default::Default::default()
    }

    // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;


    pub fn get_labels(&self) -> &[super::common::StringKeyValue] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::common::StringKeyValue>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::common::StringKeyValue> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::common::StringKeyValue> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // fixed64 start_time_unix_nano = 2;


    pub fn get_start_time_unix_nano(&self) -> u64 {
        self.start_time_unix_nano
    }
    pub fn clear_start_time_unix_nano(&mut self) {
        self.start_time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time_unix_nano(&mut self, v: u64) {
        self.start_time_unix_nano = v;
    }

    // fixed64 time_unix_nano = 3;


    pub fn get_time_unix_nano(&self) -> u64 {
        self.time_unix_nano
    }
    pub fn clear_time_unix_nano(&mut self) {
        self.time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_unix_nano(&mut self, v: u64) {
        self.time_unix_nano = v;
    }

    // int64 value = 4;


    pub fn get_value(&self) -> i64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i64) {
        self.value = v;
    }
}

impl ::protobuf::Message for Int64DataPoint {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.start_time_unix_nano = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.time_unix_nano = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 9;
        }
        if self.time_unix_nano != 0 {
            my_size += 9;
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(4, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        if self.value != 0 {
            os.write_int64(4, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Int64DataPoint {
        Int64DataPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::StringKeyValue>>(
                "labels",
                |m: &Int64DataPoint| { &m.labels },
                |m: &mut Int64DataPoint| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "start_time_unix_nano",
                |m: &Int64DataPoint| { &m.start_time_unix_nano },
                |m: &mut Int64DataPoint| { &mut m.start_time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "time_unix_nano",
                |m: &Int64DataPoint| { &m.time_unix_nano },
                |m: &mut Int64DataPoint| { &mut m.time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "value",
                |m: &Int64DataPoint| { &m.value },
                |m: &mut Int64DataPoint| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Int64DataPoint>(
                "Int64DataPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Int64DataPoint {
        static instance: ::protobuf::rt::LazyV2<Int64DataPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Int64DataPoint::new)
    }
}

impl ::protobuf::Clear for Int64DataPoint {
    fn clear(&mut self) {
        self.labels.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.value = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Int64DataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Int64DataPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct DoubleDataPoint {
    // message fields
    pub labels: ::protobuf::RepeatedField<super::common::StringKeyValue>,
    pub start_time_unix_nano: u64,
    pub time_unix_nano: u64,
    pub value: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DoubleDataPoint {
    fn default() -> &'a DoubleDataPoint {
        <DoubleDataPoint as ::protobuf::Message>::default_instance()
    }
}

impl DoubleDataPoint {
    pub fn new() -> DoubleDataPoint {
        ::std::default::Default::default()
    }

    // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;


    pub fn get_labels(&self) -> &[super::common::StringKeyValue] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::common::StringKeyValue>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::common::StringKeyValue> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::common::StringKeyValue> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // fixed64 start_time_unix_nano = 2;


    pub fn get_start_time_unix_nano(&self) -> u64 {
        self.start_time_unix_nano
    }
    pub fn clear_start_time_unix_nano(&mut self) {
        self.start_time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time_unix_nano(&mut self, v: u64) {
        self.start_time_unix_nano = v;
    }

    // fixed64 time_unix_nano = 3;


    pub fn get_time_unix_nano(&self) -> u64 {
        self.time_unix_nano
    }
    pub fn clear_time_unix_nano(&mut self) {
        self.time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_unix_nano(&mut self, v: u64) {
        self.time_unix_nano = v;
    }

    // double value = 4;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for DoubleDataPoint {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.start_time_unix_nano = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.time_unix_nano = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 9;
        }
        if self.time_unix_nano != 0 {
            my_size += 9;
        }
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        if self.value != 0. {
            os.write_double(4, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DoubleDataPoint {
        DoubleDataPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::StringKeyValue>>(
                "labels",
                |m: &DoubleDataPoint| { &m.labels },
                |m: &mut DoubleDataPoint| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "start_time_unix_nano",
                |m: &DoubleDataPoint| { &m.start_time_unix_nano },
                |m: &mut DoubleDataPoint| { &mut m.start_time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "time_unix_nano",
                |m: &DoubleDataPoint| { &m.time_unix_nano },
                |m: &mut DoubleDataPoint| { &mut m.time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &DoubleDataPoint| { &m.value },
                |m: &mut DoubleDataPoint| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DoubleDataPoint>(
                "DoubleDataPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DoubleDataPoint {
        static instance: ::protobuf::rt::LazyV2<DoubleDataPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DoubleDataPoint::new)
    }
}

impl ::protobuf::Clear for DoubleDataPoint {
    fn clear(&mut self) {
        self.labels.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DoubleDataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DoubleDataPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct HistogramDataPoint {
    // message fields
    pub labels: ::protobuf::RepeatedField<super::common::StringKeyValue>,
    pub start_time_unix_nano: u64,
    pub time_unix_nano: u64,
    pub count: u64,
    pub sum: f64,
    pub buckets: ::protobuf::RepeatedField<HistogramDataPoint_Bucket>,
    pub explicit_bounds: ::std::vec::Vec<f64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistogramDataPoint {
    fn default() -> &'a HistogramDataPoint {
        <HistogramDataPoint as ::protobuf::Message>::default_instance()
    }
}

impl HistogramDataPoint {
    pub fn new() -> HistogramDataPoint {
        ::std::default::Default::default()
    }

    // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;


    pub fn get_labels(&self) -> &[super::common::StringKeyValue] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::common::StringKeyValue>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::common::StringKeyValue> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::common::StringKeyValue> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // fixed64 start_time_unix_nano = 2;


    pub fn get_start_time_unix_nano(&self) -> u64 {
        self.start_time_unix_nano
    }
    pub fn clear_start_time_unix_nano(&mut self) {
        self.start_time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time_unix_nano(&mut self, v: u64) {
        self.start_time_unix_nano = v;
    }

    // fixed64 time_unix_nano = 3;


    pub fn get_time_unix_nano(&self) -> u64 {
        self.time_unix_nano
    }
    pub fn clear_time_unix_nano(&mut self) {
        self.time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_unix_nano(&mut self, v: u64) {
        self.time_unix_nano = v;
    }

    // uint64 count = 4;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    // double sum = 5;


    pub fn get_sum(&self) -> f64 {
        self.sum
    }
    pub fn clear_sum(&mut self) {
        self.sum = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sum(&mut self, v: f64) {
        self.sum = v;
    }

    // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket buckets = 6;


    pub fn get_buckets(&self) -> &[HistogramDataPoint_Bucket] {
        &self.buckets
    }
    pub fn clear_buckets(&mut self) {
        self.buckets.clear();
    }

    // Param is passed by value, moved
    pub fn set_buckets(&mut self, v: ::protobuf::RepeatedField<HistogramDataPoint_Bucket>) {
        self.buckets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_buckets(&mut self) -> &mut ::protobuf::RepeatedField<HistogramDataPoint_Bucket> {
        &mut self.buckets
    }

    // Take field
    pub fn take_buckets(&mut self) -> ::protobuf::RepeatedField<HistogramDataPoint_Bucket> {
        ::std::mem::replace(&mut self.buckets, ::protobuf::RepeatedField::new())
    }

    // repeated double explicit_bounds = 7;


    pub fn get_explicit_bounds(&self) -> &[f64] {
        &self.explicit_bounds
    }
    pub fn clear_explicit_bounds(&mut self) {
        self.explicit_bounds.clear();
    }

    // Param is passed by value, moved
    pub fn set_explicit_bounds(&mut self, v: ::std::vec::Vec<f64>) {
        self.explicit_bounds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_explicit_bounds(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.explicit_bounds
    }

    // Take field
    pub fn take_explicit_bounds(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.explicit_bounds, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HistogramDataPoint {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buckets {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.start_time_unix_nano = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.time_unix_nano = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sum = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.buckets)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.explicit_bounds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 9;
        }
        if self.time_unix_nano != 0 {
            my_size += 9;
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sum != 0. {
            my_size += 9;
        }
        for value in &self.buckets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += 9 * self.explicit_bounds.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        if self.count != 0 {
            os.write_uint64(4, self.count)?;
        }
        if self.sum != 0. {
            os.write_double(5, self.sum)?;
        }
        for v in &self.buckets {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.explicit_bounds {
            os.write_double(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistogramDataPoint {
        HistogramDataPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::StringKeyValue>>(
                "labels",
                |m: &HistogramDataPoint| { &m.labels },
                |m: &mut HistogramDataPoint| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "start_time_unix_nano",
                |m: &HistogramDataPoint| { &m.start_time_unix_nano },
                |m: &mut HistogramDataPoint| { &mut m.start_time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "time_unix_nano",
                |m: &HistogramDataPoint| { &m.time_unix_nano },
                |m: &mut HistogramDataPoint| { &mut m.time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &HistogramDataPoint| { &m.count },
                |m: &mut HistogramDataPoint| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sum",
                |m: &HistogramDataPoint| { &m.sum },
                |m: &mut HistogramDataPoint| { &mut m.sum },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HistogramDataPoint_Bucket>>(
                "buckets",
                |m: &HistogramDataPoint| { &m.buckets },
                |m: &mut HistogramDataPoint| { &mut m.buckets },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "explicit_bounds",
                |m: &HistogramDataPoint| { &m.explicit_bounds },
                |m: &mut HistogramDataPoint| { &mut m.explicit_bounds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistogramDataPoint>(
                "HistogramDataPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistogramDataPoint {
        static instance: ::protobuf::rt::LazyV2<HistogramDataPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistogramDataPoint::new)
    }
}

impl ::protobuf::Clear for HistogramDataPoint {
    fn clear(&mut self) {
        self.labels.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.count = 0;
        self.sum = 0.;
        self.buckets.clear();
        self.explicit_bounds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistogramDataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistogramDataPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct HistogramDataPoint_Bucket {
    // message fields
    pub count: u64,
    pub exemplar: ::protobuf::SingularPtrField<HistogramDataPoint_Bucket_Exemplar>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistogramDataPoint_Bucket {
    fn default() -> &'a HistogramDataPoint_Bucket {
        <HistogramDataPoint_Bucket as ::protobuf::Message>::default_instance()
    }
}

impl HistogramDataPoint_Bucket {
    pub fn new() -> HistogramDataPoint_Bucket {
        ::std::default::Default::default()
    }

    // uint64 count = 1;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    // .opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket.Exemplar exemplar = 2;


    pub fn get_exemplar(&self) -> &HistogramDataPoint_Bucket_Exemplar {
        self.exemplar.as_ref().unwrap_or_else(|| <HistogramDataPoint_Bucket_Exemplar as ::protobuf::Message>::default_instance())
    }
    pub fn clear_exemplar(&mut self) {
        self.exemplar.clear();
    }

    pub fn has_exemplar(&self) -> bool {
        self.exemplar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exemplar(&mut self, v: HistogramDataPoint_Bucket_Exemplar) {
        self.exemplar = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exemplar(&mut self) -> &mut HistogramDataPoint_Bucket_Exemplar {
        if self.exemplar.is_none() {
            self.exemplar.set_default();
        }
        self.exemplar.as_mut().unwrap()
    }

    // Take field
    pub fn take_exemplar(&mut self) -> HistogramDataPoint_Bucket_Exemplar {
        self.exemplar.take().unwrap_or_else(|| HistogramDataPoint_Bucket_Exemplar::new())
    }
}

impl ::protobuf::Message for HistogramDataPoint_Bucket {
    fn is_initialized(&self) -> bool {
        for v in &self.exemplar {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.exemplar)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.exemplar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_uint64(1, self.count)?;
        }
        if let Some(ref v) = self.exemplar.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistogramDataPoint_Bucket {
        HistogramDataPoint_Bucket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &HistogramDataPoint_Bucket| { &m.count },
                |m: &mut HistogramDataPoint_Bucket| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HistogramDataPoint_Bucket_Exemplar>>(
                "exemplar",
                |m: &HistogramDataPoint_Bucket| { &m.exemplar },
                |m: &mut HistogramDataPoint_Bucket| { &mut m.exemplar },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistogramDataPoint_Bucket>(
                "HistogramDataPoint.Bucket",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistogramDataPoint_Bucket {
        static instance: ::protobuf::rt::LazyV2<HistogramDataPoint_Bucket> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistogramDataPoint_Bucket::new)
    }
}

impl ::protobuf::Clear for HistogramDataPoint_Bucket {
    fn clear(&mut self) {
        self.count = 0;
        self.exemplar.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistogramDataPoint_Bucket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistogramDataPoint_Bucket {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct HistogramDataPoint_Bucket_Exemplar {
    // message fields
    pub value: f64,
    pub time_unix_nano: u64,
    pub attachments: ::protobuf::RepeatedField<super::common::StringKeyValue>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistogramDataPoint_Bucket_Exemplar {
    fn default() -> &'a HistogramDataPoint_Bucket_Exemplar {
        <HistogramDataPoint_Bucket_Exemplar as ::protobuf::Message>::default_instance()
    }
}

impl HistogramDataPoint_Bucket_Exemplar {
    pub fn new() -> HistogramDataPoint_Bucket_Exemplar {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // fixed64 time_unix_nano = 2;


    pub fn get_time_unix_nano(&self) -> u64 {
        self.time_unix_nano
    }
    pub fn clear_time_unix_nano(&mut self) {
        self.time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_unix_nano(&mut self, v: u64) {
        self.time_unix_nano = v;
    }

    // repeated .opentelemetry.proto.common.v1.StringKeyValue attachments = 3;


    pub fn get_attachments(&self) -> &[super::common::StringKeyValue] {
        &self.attachments
    }
    pub fn clear_attachments(&mut self) {
        self.attachments.clear();
    }

    // Param is passed by value, moved
    pub fn set_attachments(&mut self, v: ::protobuf::RepeatedField<super::common::StringKeyValue>) {
        self.attachments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attachments(&mut self) -> &mut ::protobuf::RepeatedField<super::common::StringKeyValue> {
        &mut self.attachments
    }

    // Take field
    pub fn take_attachments(&mut self) -> ::protobuf::RepeatedField<super::common::StringKeyValue> {
        ::std::mem::replace(&mut self.attachments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HistogramDataPoint_Bucket_Exemplar {
    fn is_initialized(&self) -> bool {
        for v in &self.attachments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.time_unix_nano = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attachments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        if self.time_unix_nano != 0 {
            my_size += 9;
        }
        for value in &self.attachments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(2, self.time_unix_nano)?;
        }
        for v in &self.attachments {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistogramDataPoint_Bucket_Exemplar {
        HistogramDataPoint_Bucket_Exemplar::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &HistogramDataPoint_Bucket_Exemplar| { &m.value },
                |m: &mut HistogramDataPoint_Bucket_Exemplar| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "time_unix_nano",
                |m: &HistogramDataPoint_Bucket_Exemplar| { &m.time_unix_nano },
                |m: &mut HistogramDataPoint_Bucket_Exemplar| { &mut m.time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::StringKeyValue>>(
                "attachments",
                |m: &HistogramDataPoint_Bucket_Exemplar| { &m.attachments },
                |m: &mut HistogramDataPoint_Bucket_Exemplar| { &mut m.attachments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistogramDataPoint_Bucket_Exemplar>(
                "HistogramDataPoint.Bucket.Exemplar",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistogramDataPoint_Bucket_Exemplar {
        static instance: ::protobuf::rt::LazyV2<HistogramDataPoint_Bucket_Exemplar> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistogramDataPoint_Bucket_Exemplar::new)
    }
}

impl ::protobuf::Clear for HistogramDataPoint_Bucket_Exemplar {
    fn clear(&mut self) {
        self.value = 0.;
        self.time_unix_nano = 0;
        self.attachments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistogramDataPoint_Bucket_Exemplar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistogramDataPoint_Bucket_Exemplar {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SummaryDataPoint {
    // message fields
    pub labels: ::protobuf::RepeatedField<super::common::StringKeyValue>,
    pub start_time_unix_nano: u64,
    pub time_unix_nano: u64,
    pub count: u64,
    pub sum: f64,
    pub quantile_values: ::protobuf::RepeatedField<SummaryDataPoint_ValueAtQuantile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SummaryDataPoint {
    fn default() -> &'a SummaryDataPoint {
        <SummaryDataPoint as ::protobuf::Message>::default_instance()
    }
}

impl SummaryDataPoint {
    pub fn new() -> SummaryDataPoint {
        ::std::default::Default::default()
    }

    // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;


    pub fn get_labels(&self) -> &[super::common::StringKeyValue] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::common::StringKeyValue>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::common::StringKeyValue> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::common::StringKeyValue> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // fixed64 start_time_unix_nano = 2;


    pub fn get_start_time_unix_nano(&self) -> u64 {
        self.start_time_unix_nano
    }
    pub fn clear_start_time_unix_nano(&mut self) {
        self.start_time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time_unix_nano(&mut self, v: u64) {
        self.start_time_unix_nano = v;
    }

    // fixed64 time_unix_nano = 3;


    pub fn get_time_unix_nano(&self) -> u64 {
        self.time_unix_nano
    }
    pub fn clear_time_unix_nano(&mut self) {
        self.time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_unix_nano(&mut self, v: u64) {
        self.time_unix_nano = v;
    }

    // uint64 count = 4;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    // double sum = 5;


    pub fn get_sum(&self) -> f64 {
        self.sum
    }
    pub fn clear_sum(&mut self) {
        self.sum = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sum(&mut self, v: f64) {
        self.sum = v;
    }

    // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;


    pub fn get_quantile_values(&self) -> &[SummaryDataPoint_ValueAtQuantile] {
        &self.quantile_values
    }
    pub fn clear_quantile_values(&mut self) {
        self.quantile_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_quantile_values(&mut self, v: ::protobuf::RepeatedField<SummaryDataPoint_ValueAtQuantile>) {
        self.quantile_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_quantile_values(&mut self) -> &mut ::protobuf::RepeatedField<SummaryDataPoint_ValueAtQuantile> {
        &mut self.quantile_values
    }

    // Take field
    pub fn take_quantile_values(&mut self) -> ::protobuf::RepeatedField<SummaryDataPoint_ValueAtQuantile> {
        ::std::mem::replace(&mut self.quantile_values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SummaryDataPoint {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.quantile_values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.start_time_unix_nano = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.time_unix_nano = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sum = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.quantile_values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 9;
        }
        if self.time_unix_nano != 0 {
            my_size += 9;
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sum != 0. {
            my_size += 9;
        }
        for value in &self.quantile_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        if self.count != 0 {
            os.write_uint64(4, self.count)?;
        }
        if self.sum != 0. {
            os.write_double(5, self.sum)?;
        }
        for v in &self.quantile_values {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SummaryDataPoint {
        SummaryDataPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::StringKeyValue>>(
                "labels",
                |m: &SummaryDataPoint| { &m.labels },
                |m: &mut SummaryDataPoint| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "start_time_unix_nano",
                |m: &SummaryDataPoint| { &m.start_time_unix_nano },
                |m: &mut SummaryDataPoint| { &mut m.start_time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "time_unix_nano",
                |m: &SummaryDataPoint| { &m.time_unix_nano },
                |m: &mut SummaryDataPoint| { &mut m.time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &SummaryDataPoint| { &m.count },
                |m: &mut SummaryDataPoint| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sum",
                |m: &SummaryDataPoint| { &m.sum },
                |m: &mut SummaryDataPoint| { &mut m.sum },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SummaryDataPoint_ValueAtQuantile>>(
                "quantile_values",
                |m: &SummaryDataPoint| { &m.quantile_values },
                |m: &mut SummaryDataPoint| { &mut m.quantile_values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SummaryDataPoint>(
                "SummaryDataPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SummaryDataPoint {
        static instance: ::protobuf::rt::LazyV2<SummaryDataPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SummaryDataPoint::new)
    }
}

impl ::protobuf::Clear for SummaryDataPoint {
    fn clear(&mut self) {
        self.labels.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.count = 0;
        self.sum = 0.;
        self.quantile_values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SummaryDataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SummaryDataPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SummaryDataPoint_ValueAtQuantile {
    // message fields
    pub quantile: f64,
    pub value: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SummaryDataPoint_ValueAtQuantile {
    fn default() -> &'a SummaryDataPoint_ValueAtQuantile {
        <SummaryDataPoint_ValueAtQuantile as ::protobuf::Message>::default_instance()
    }
}

impl SummaryDataPoint_ValueAtQuantile {
    pub fn new() -> SummaryDataPoint_ValueAtQuantile {
        ::std::default::Default::default()
    }

    // double quantile = 1;


    pub fn get_quantile(&self) -> f64 {
        self.quantile
    }
    pub fn clear_quantile(&mut self) {
        self.quantile = 0.;
    }

    // Param is passed by value, moved
    pub fn set_quantile(&mut self, v: f64) {
        self.quantile = v;
    }

    // double value = 2;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for SummaryDataPoint_ValueAtQuantile {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.quantile = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.quantile != 0. {
            my_size += 9;
        }
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.quantile != 0. {
            os.write_double(1, self.quantile)?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SummaryDataPoint_ValueAtQuantile {
        SummaryDataPoint_ValueAtQuantile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "quantile",
                |m: &SummaryDataPoint_ValueAtQuantile| { &m.quantile },
                |m: &mut SummaryDataPoint_ValueAtQuantile| { &mut m.quantile },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &SummaryDataPoint_ValueAtQuantile| { &m.value },
                |m: &mut SummaryDataPoint_ValueAtQuantile| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SummaryDataPoint_ValueAtQuantile>(
                "SummaryDataPoint.ValueAtQuantile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SummaryDataPoint_ValueAtQuantile {
        static instance: ::protobuf::rt::LazyV2<SummaryDataPoint_ValueAtQuantile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SummaryDataPoint_ValueAtQuantile::new)
    }
}

impl ::protobuf::Clear for SummaryDataPoint_ValueAtQuantile {
    fn clear(&mut self) {
        self.quantile = 0.;
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SummaryDataPoint_ValueAtQuantile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SummaryDataPoint_ValueAtQuantile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,opentelemetry/proto/metrics/v1/metrics.proto\x12\x1eopentelemetry.pro\
    to.metrics.v1\x1a*opentelemetry/proto/common/v1/common.proto\x1a.opentel\
    emetry/proto/resource/v1/resource.proto\"\xe0\x01\n\x0fResourceMetrics\
    \x12E\n\x08resource\x18\x01\x20\x01(\x0b2).opentelemetry.proto.resource.\
    v1.ResourceR\x08resource\x12\x85\x01\n\x1finstrumentation_library_metric\
    s\x18\x02\x20\x03(\x0b2=.opentelemetry.proto.metrics.v1.InstrumentationL\
    ibraryMetricsR\x1dinstrumentationLibraryMetrics\"\xd1\x01\n\x1dInstrumen\
    tationLibraryMetrics\x12n\n\x17instrumentation_library\x18\x01\x20\x01(\
    \x0b25.opentelemetry.proto.common.v1.InstrumentationLibraryR\x16instrume\
    ntationLibrary\x12@\n\x07metrics\x18\x02\x20\x03(\x0b2&.opentelemetry.pr\
    oto.metrics.v1.MetricR\x07metrics\"\xec\x03\n\x06Metric\x12]\n\x11metric\
    _descriptor\x18\x01\x20\x01(\x0b20.opentelemetry.proto.metrics.v1.Metric\
    DescriptorR\x10metricDescriptor\x12Z\n\x11int64_data_points\x18\x02\x20\
    \x03(\x0b2..opentelemetry.proto.metrics.v1.Int64DataPointR\x0fint64DataP\
    oints\x12]\n\x12double_data_points\x18\x03\x20\x03(\x0b2/.opentelemetry.\
    proto.metrics.v1.DoubleDataPointR\x10doubleDataPoints\x12f\n\x15histogra\
    m_data_points\x18\x04\x20\x03(\x0b22.opentelemetry.proto.metrics.v1.Hist\
    ogramDataPointR\x13histogramDataPoints\x12`\n\x13summary_data_points\x18\
    \x05\x20\x03(\x0b20.opentelemetry.proto.metrics.v1.SummaryDataPointR\x11\
    summaryDataPoints\"\xd5\x03\n\x10MetricDescriptor\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\
    \x0bdescription\x12\x12\n\x04unit\x18\x03\x20\x01(\tR\x04unit\x12I\n\x04\
    type\x18\x04\x20\x01(\x0e25.opentelemetry.proto.metrics.v1.MetricDescrip\
    tor.TypeR\x04type\x12^\n\x0btemporality\x18\x05\x20\x01(\x0e2<.opentelem\
    etry.proto.metrics.v1.MetricDescriptor.TemporalityR\x0btemporality\"v\n\
    \x04Type\x12\x10\n\x0cINVALID_TYPE\x10\0\x12\t\n\x05INT64\x10\x01\x12\
    \x13\n\x0fMONOTONIC_INT64\x10\x02\x12\n\n\x06DOUBLE\x10\x03\x12\x14\n\
    \x10MONOTONIC_DOUBLE\x10\x04\x12\r\n\tHISTOGRAM\x10\x05\x12\x0b\n\x07SUM\
    MARY\x10\x06\"T\n\x0bTemporality\x12\x17\n\x13INVALID_TEMPORALITY\x10\0\
    \x12\x11\n\rINSTANTANEOUS\x10\x01\x12\t\n\x05DELTA\x10\x02\x12\x0e\n\nCU\
    MULATIVE\x10\x03\"\xc4\x01\n\x0eInt64DataPoint\x12E\n\x06labels\x18\x01\
    \x20\x03(\x0b2-.opentelemetry.proto.common.v1.StringKeyValueR\x06labels\
    \x12/\n\x14start_time_unix_nano\x18\x02\x20\x01(\x06R\x11startTimeUnixNa\
    no\x12$\n\x0etime_unix_nano\x18\x03\x20\x01(\x06R\x0ctimeUnixNano\x12\
    \x14\n\x05value\x18\x04\x20\x01(\x03R\x05value\"\xc5\x01\n\x0fDoubleData\
    Point\x12E\n\x06labels\x18\x01\x20\x03(\x0b2-.opentelemetry.proto.common\
    .v1.StringKeyValueR\x06labels\x12/\n\x14start_time_unix_nano\x18\x02\x20\
    \x01(\x06R\x11startTimeUnixNano\x12$\n\x0etime_unix_nano\x18\x03\x20\x01\
    (\x06R\x0ctimeUnixNano\x12\x14\n\x05value\x18\x04\x20\x01(\x01R\x05value\
    \"\xf3\x04\n\x12HistogramDataPoint\x12E\n\x06labels\x18\x01\x20\x03(\x0b\
    2-.opentelemetry.proto.common.v1.StringKeyValueR\x06labels\x12/\n\x14sta\
    rt_time_unix_nano\x18\x02\x20\x01(\x06R\x11startTimeUnixNano\x12$\n\x0et\
    ime_unix_nano\x18\x03\x20\x01(\x06R\x0ctimeUnixNano\x12\x14\n\x05count\
    \x18\x04\x20\x01(\x04R\x05count\x12\x10\n\x03sum\x18\x05\x20\x01(\x01R\
    \x03sum\x12S\n\x07buckets\x18\x06\x20\x03(\x0b29.opentelemetry.proto.met\
    rics.v1.HistogramDataPoint.BucketR\x07buckets\x12'\n\x0fexplicit_bounds\
    \x18\x07\x20\x03(\x01R\x0eexplicitBounds\x1a\x98\x02\n\x06Bucket\x12\x14\
    \n\x05count\x18\x01\x20\x01(\x04R\x05count\x12^\n\x08exemplar\x18\x02\
    \x20\x01(\x0b2B.opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket\
    .ExemplarR\x08exemplar\x1a\x97\x01\n\x08Exemplar\x12\x14\n\x05value\x18\
    \x01\x20\x01(\x01R\x05value\x12$\n\x0etime_unix_nano\x18\x02\x20\x01(\
    \x06R\x0ctimeUnixNano\x12O\n\x0battachments\x18\x03\x20\x03(\x0b2-.opent\
    elemetry.proto.common.v1.StringKeyValueR\x0battachments\"\x88\x03\n\x10S\
    ummaryDataPoint\x12E\n\x06labels\x18\x01\x20\x03(\x0b2-.opentelemetry.pr\
    oto.common.v1.StringKeyValueR\x06labels\x12/\n\x14start_time_unix_nano\
    \x18\x02\x20\x01(\x06R\x11startTimeUnixNano\x12$\n\x0etime_unix_nano\x18\
    \x03\x20\x01(\x06R\x0ctimeUnixNano\x12\x14\n\x05count\x18\x04\x20\x01(\
    \x04R\x05count\x12\x10\n\x03sum\x18\x05\x20\x01(\x01R\x03sum\x12i\n\x0fq\
    uantile_values\x18\x06\x20\x03(\x0b2@.opentelemetry.proto.metrics.v1.Sum\
    maryDataPoint.ValueAtQuantileR\x0equantileValues\x1aC\n\x0fValueAtQuanti\
    le\x12\x1a\n\x08quantile\x18\x01\x20\x01(\x01R\x08quantile\x12\x14\n\x05\
    value\x18\x02\x20\x01(\x01R\x05valueBt\n!io.opentelemetry.proto.metrics.\
    v1B\x0cMetricsProtoP\x01Z?github.com/open-telemetry/opentelemetry-proto/\
    gen/go/metrics/v1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
