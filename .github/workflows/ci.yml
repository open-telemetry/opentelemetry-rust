name: CI
env:
  CI: true
on:
  pull_request:
  push:
    branches:
    - main
    paths-ignore:
    - '**.md'
jobs:
  test:
    strategy:
      matrix:
        # test both stable and beta versions of Rust on ubuntu-latest
        os: [ubuntu-latest]
        rust: [stable, beta]
        # test only stable version of Rust on Windows
        include:
          - rust: stable
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Free disk space
      if: ${{ matrix.os == 'ubuntu-latest'}}
      run: |
        df -h
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        df -h
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt
    - name: "Set rustup profile"
      run: rustup set profile minimal
    - uses: arduino/setup-protoc@v3
    - name: Test
      run: bash ./scripts/test.sh
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - uses: arduino/setup-protoc@v3
    - uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check
    - name: Lint
      run: bash ./scripts/lint.sh
  external-types:
    strategy:
      matrix:
        example: [opentelemetry, opentelemetry-sdk, opentelemetry-otlp, opentelemetry-zipkin]
    runs-on: ubuntu-latest # TODO: Check if this could be covered for Windows. The step used currently fails on Windows.
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2024-02-07
          components: rustfmt
      - name: external-type-check
        run: |
          cargo install cargo-check-external-types
          cd ${{ matrix.example }}
          cargo check-external-types --config allowed-external-types.toml
  non-default-examples:
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        example: [opentelemetry-otlp/examples/basic-otlp]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - uses: arduino/setup-protoc@v3
    - name: Build
      run: |
        cd ${{ matrix.example }}
        cargo build --verbose
  msrv:
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: dtolnay/rust-toolchain@1.65.0
    - name: Patch dependencies versions # some dependencies bump MSRV without major version bump
      run: bash ./scripts/patch_dependencies.sh
    - name: Run tests
      run: cargo --version &&
        cargo test --manifest-path=opentelemetry/Cargo.toml --features trace,metrics,testing &&
        cargo test --manifest-path=opentelemetry-jaeger/Cargo.toml --features rt-tokio &&
        cargo test --manifest-path=opentelemetry-zipkin/Cargo.toml
  cargo-deny:
    runs-on: ubuntu-latest # This uses the step `EmbarkStudios/cargo-deny-action@v1` which is only supported on Linux
    continue-on-error: true # Prevent sudden announcement of a new advisory from failing ci
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check advisories
  docs:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: arduino/setup-protoc@v3
      - name: doc
        run: cargo doc --no-deps --all-features
        env:
          CARGO_INCREMENTAL: '0'
          RUSTDOCFLAGS: -Dwarnings
  coverage:
    continue-on-error: true
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.event.pull_request.labels.*.name, 'dependencies') }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt,llvm-tools-preview
      - uses: arduino/setup-protoc@v3
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: cargo llvm-cov --locked --all-features --workspace --lcov --output-path lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
