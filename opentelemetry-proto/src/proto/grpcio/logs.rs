// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `opentelemetry/proto/logs/v1/logs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LogsData {
    // message fields
    pub resource_logs: ::protobuf::RepeatedField<ResourceLogs>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogsData {
    fn default() -> &'a LogsData {
        <LogsData as ::protobuf::Message>::default_instance()
    }
}

impl LogsData {
    pub fn new() -> LogsData {
        ::std::default::Default::default()
    }

    // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;


    pub fn get_resource_logs(&self) -> &[ResourceLogs] {
        &self.resource_logs
    }
    pub fn clear_resource_logs(&mut self) {
        self.resource_logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_logs(&mut self, v: ::protobuf::RepeatedField<ResourceLogs>) {
        self.resource_logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resource_logs(&mut self) -> &mut ::protobuf::RepeatedField<ResourceLogs> {
        &mut self.resource_logs
    }

    // Take field
    pub fn take_resource_logs(&mut self) -> ::protobuf::RepeatedField<ResourceLogs> {
        ::std::mem::replace(&mut self.resource_logs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LogsData {
    fn is_initialized(&self) -> bool {
        for v in &self.resource_logs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resource_logs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.resource_logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.resource_logs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogsData {
        LogsData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResourceLogs>>(
                "resource_logs",
                |m: &LogsData| { &m.resource_logs },
                |m: &mut LogsData| { &mut m.resource_logs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogsData>(
                "LogsData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogsData {
        static instance: ::protobuf::rt::LazyV2<LogsData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogsData::new)
    }
}

impl ::protobuf::Clear for LogsData {
    fn clear(&mut self) {
        self.resource_logs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogsData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogsData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ResourceLogs {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::resource::Resource>,
    pub scope_logs: ::protobuf::RepeatedField<ScopeLogs>,
    pub schema_url: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceLogs {
    fn default() -> &'a ResourceLogs {
        <ResourceLogs as ::protobuf::Message>::default_instance()
    }
}

impl ResourceLogs {
    pub fn new() -> ResourceLogs {
        ::std::default::Default::default()
    }

    // .opentelemetry.proto.resource.v1.Resource resource = 1;


    pub fn get_resource(&self) -> &super::resource::Resource {
        self.resource.as_ref().unwrap_or_else(|| <super::resource::Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::resource::Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::resource::Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::resource::Resource {
        self.resource.take().unwrap_or_else(|| super::resource::Resource::new())
    }

    // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;


    pub fn get_scope_logs(&self) -> &[ScopeLogs] {
        &self.scope_logs
    }
    pub fn clear_scope_logs(&mut self) {
        self.scope_logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_scope_logs(&mut self, v: ::protobuf::RepeatedField<ScopeLogs>) {
        self.scope_logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_scope_logs(&mut self) -> &mut ::protobuf::RepeatedField<ScopeLogs> {
        &mut self.scope_logs
    }

    // Take field
    pub fn take_scope_logs(&mut self) -> ::protobuf::RepeatedField<ScopeLogs> {
        ::std::mem::replace(&mut self.scope_logs, ::protobuf::RepeatedField::new())
    }

    // string schema_url = 3;


    pub fn get_schema_url(&self) -> &str {
        &self.schema_url
    }
    pub fn clear_schema_url(&mut self) {
        self.schema_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_schema_url(&mut self, v: ::std::string::String) {
        self.schema_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema_url(&mut self) -> &mut ::std::string::String {
        &mut self.schema_url
    }

    // Take field
    pub fn take_schema_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schema_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ResourceLogs {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.scope_logs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.scope_logs)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schema_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.scope_logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.schema_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.schema_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.scope_logs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.schema_url.is_empty() {
            os.write_string(3, &self.schema_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceLogs {
        ResourceLogs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::resource::Resource>>(
                "resource",
                |m: &ResourceLogs| { &m.resource },
                |m: &mut ResourceLogs| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ScopeLogs>>(
                "scope_logs",
                |m: &ResourceLogs| { &m.scope_logs },
                |m: &mut ResourceLogs| { &mut m.scope_logs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schema_url",
                |m: &ResourceLogs| { &m.schema_url },
                |m: &mut ResourceLogs| { &mut m.schema_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceLogs>(
                "ResourceLogs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceLogs {
        static instance: ::protobuf::rt::LazyV2<ResourceLogs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceLogs::new)
    }
}

impl ::protobuf::Clear for ResourceLogs {
    fn clear(&mut self) {
        self.resource.clear();
        self.scope_logs.clear();
        self.schema_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceLogs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceLogs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ScopeLogs {
    // message fields
    pub scope: ::protobuf::SingularPtrField<super::common::InstrumentationScope>,
    pub log_records: ::protobuf::RepeatedField<LogRecord>,
    pub schema_url: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopeLogs {
    fn default() -> &'a ScopeLogs {
        <ScopeLogs as ::protobuf::Message>::default_instance()
    }
}

impl ScopeLogs {
    pub fn new() -> ScopeLogs {
        ::std::default::Default::default()
    }

    // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;


    pub fn get_scope(&self) -> &super::common::InstrumentationScope {
        self.scope.as_ref().unwrap_or_else(|| <super::common::InstrumentationScope as ::protobuf::Message>::default_instance())
    }
    pub fn clear_scope(&mut self) {
        self.scope.clear();
    }

    pub fn has_scope(&self) -> bool {
        self.scope.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: super::common::InstrumentationScope) {
        self.scope = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scope(&mut self) -> &mut super::common::InstrumentationScope {
        if self.scope.is_none() {
            self.scope.set_default();
        }
        self.scope.as_mut().unwrap()
    }

    // Take field
    pub fn take_scope(&mut self) -> super::common::InstrumentationScope {
        self.scope.take().unwrap_or_else(|| super::common::InstrumentationScope::new())
    }

    // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;


    pub fn get_log_records(&self) -> &[LogRecord] {
        &self.log_records
    }
    pub fn clear_log_records(&mut self) {
        self.log_records.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_records(&mut self, v: ::protobuf::RepeatedField<LogRecord>) {
        self.log_records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_log_records(&mut self) -> &mut ::protobuf::RepeatedField<LogRecord> {
        &mut self.log_records
    }

    // Take field
    pub fn take_log_records(&mut self) -> ::protobuf::RepeatedField<LogRecord> {
        ::std::mem::replace(&mut self.log_records, ::protobuf::RepeatedField::new())
    }

    // string schema_url = 3;


    pub fn get_schema_url(&self) -> &str {
        &self.schema_url
    }
    pub fn clear_schema_url(&mut self) {
        self.schema_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_schema_url(&mut self, v: ::std::string::String) {
        self.schema_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema_url(&mut self) -> &mut ::std::string::String {
        &mut self.schema_url
    }

    // Take field
    pub fn take_schema_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schema_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ScopeLogs {
    fn is_initialized(&self) -> bool {
        for v in &self.scope {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.log_records {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.scope)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.log_records)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schema_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.scope.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.log_records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.schema_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.schema_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.scope.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.log_records {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.schema_url.is_empty() {
            os.write_string(3, &self.schema_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopeLogs {
        ScopeLogs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::InstrumentationScope>>(
                "scope",
                |m: &ScopeLogs| { &m.scope },
                |m: &mut ScopeLogs| { &mut m.scope },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogRecord>>(
                "log_records",
                |m: &ScopeLogs| { &m.log_records },
                |m: &mut ScopeLogs| { &mut m.log_records },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schema_url",
                |m: &ScopeLogs| { &m.schema_url },
                |m: &mut ScopeLogs| { &mut m.schema_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopeLogs>(
                "ScopeLogs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopeLogs {
        static instance: ::protobuf::rt::LazyV2<ScopeLogs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopeLogs::new)
    }
}

impl ::protobuf::Clear for ScopeLogs {
    fn clear(&mut self) {
        self.scope.clear();
        self.log_records.clear();
        self.schema_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopeLogs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopeLogs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LogRecord {
    // message fields
    pub time_unix_nano: u64,
    pub observed_time_unix_nano: u64,
    pub severity_number: SeverityNumber,
    pub severity_text: ::std::string::String,
    pub body: ::protobuf::SingularPtrField<super::common::AnyValue>,
    pub attributes: ::protobuf::RepeatedField<super::common::KeyValue>,
    pub dropped_attributes_count: u32,
    pub flags: u32,
    pub trace_id: ::std::vec::Vec<u8>,
    pub span_id: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogRecord {
    fn default() -> &'a LogRecord {
        <LogRecord as ::protobuf::Message>::default_instance()
    }
}

impl LogRecord {
    pub fn new() -> LogRecord {
        ::std::default::Default::default()
    }

    // fixed64 time_unix_nano = 1;


    pub fn get_time_unix_nano(&self) -> u64 {
        self.time_unix_nano
    }
    pub fn clear_time_unix_nano(&mut self) {
        self.time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_unix_nano(&mut self, v: u64) {
        self.time_unix_nano = v;
    }

    // fixed64 observed_time_unix_nano = 11;


    pub fn get_observed_time_unix_nano(&self) -> u64 {
        self.observed_time_unix_nano
    }
    pub fn clear_observed_time_unix_nano(&mut self) {
        self.observed_time_unix_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_observed_time_unix_nano(&mut self, v: u64) {
        self.observed_time_unix_nano = v;
    }

    // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;


    pub fn get_severity_number(&self) -> SeverityNumber {
        self.severity_number
    }
    pub fn clear_severity_number(&mut self) {
        self.severity_number = SeverityNumber::SEVERITY_NUMBER_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_severity_number(&mut self, v: SeverityNumber) {
        self.severity_number = v;
    }

    // string severity_text = 3;


    pub fn get_severity_text(&self) -> &str {
        &self.severity_text
    }
    pub fn clear_severity_text(&mut self) {
        self.severity_text.clear();
    }

    // Param is passed by value, moved
    pub fn set_severity_text(&mut self, v: ::std::string::String) {
        self.severity_text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_severity_text(&mut self) -> &mut ::std::string::String {
        &mut self.severity_text
    }

    // Take field
    pub fn take_severity_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.severity_text, ::std::string::String::new())
    }

    // .opentelemetry.proto.common.v1.AnyValue body = 5;


    pub fn get_body(&self) -> &super::common::AnyValue {
        self.body.as_ref().unwrap_or_else(|| <super::common::AnyValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: super::common::AnyValue) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut super::common::AnyValue {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> super::common::AnyValue {
        self.body.take().unwrap_or_else(|| super::common::AnyValue::new())
    }

    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;


    pub fn get_attributes(&self) -> &[super::common::KeyValue] {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::protobuf::RepeatedField<super::common::KeyValue>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::protobuf::RepeatedField<super::common::KeyValue> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::protobuf::RepeatedField<super::common::KeyValue> {
        ::std::mem::replace(&mut self.attributes, ::protobuf::RepeatedField::new())
    }

    // uint32 dropped_attributes_count = 7;


    pub fn get_dropped_attributes_count(&self) -> u32 {
        self.dropped_attributes_count
    }
    pub fn clear_dropped_attributes_count(&mut self) {
        self.dropped_attributes_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_dropped_attributes_count(&mut self, v: u32) {
        self.dropped_attributes_count = v;
    }

    // fixed32 flags = 8;


    pub fn get_flags(&self) -> u32 {
        self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = v;
    }

    // bytes trace_id = 9;


    pub fn get_trace_id(&self) -> &[u8] {
        &self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.trace_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trace_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.trace_id
    }

    // Take field
    pub fn take_trace_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.trace_id, ::std::vec::Vec::new())
    }

    // bytes span_id = 10;


    pub fn get_span_id(&self) -> &[u8] {
        &self.span_id
    }
    pub fn clear_span_id(&mut self) {
        self.span_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_span_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.span_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_span_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.span_id
    }

    // Take field
    pub fn take_span_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.span_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LogRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.time_unix_nano = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.observed_time_unix_nano = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.severity_number, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.severity_text)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attributes)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dropped_attributes_count = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.flags = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.trace_id)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.span_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time_unix_nano != 0 {
            my_size += 9;
        }
        if self.observed_time_unix_nano != 0 {
            my_size += 9;
        }
        if self.severity_number != SeverityNumber::SEVERITY_NUMBER_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.severity_number);
        }
        if !self.severity_text.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.severity_text);
        }
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.dropped_attributes_count != 0 {
            my_size += ::protobuf::rt::value_size(7, self.dropped_attributes_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.flags != 0 {
            my_size += 5;
        }
        if !self.trace_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.trace_id);
        }
        if !self.span_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.span_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time_unix_nano != 0 {
            os.write_fixed64(1, self.time_unix_nano)?;
        }
        if self.observed_time_unix_nano != 0 {
            os.write_fixed64(11, self.observed_time_unix_nano)?;
        }
        if self.severity_number != SeverityNumber::SEVERITY_NUMBER_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.severity_number))?;
        }
        if !self.severity_text.is_empty() {
            os.write_string(3, &self.severity_text)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.attributes {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.dropped_attributes_count != 0 {
            os.write_uint32(7, self.dropped_attributes_count)?;
        }
        if self.flags != 0 {
            os.write_fixed32(8, self.flags)?;
        }
        if !self.trace_id.is_empty() {
            os.write_bytes(9, &self.trace_id)?;
        }
        if !self.span_id.is_empty() {
            os.write_bytes(10, &self.span_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogRecord {
        LogRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "time_unix_nano",
                |m: &LogRecord| { &m.time_unix_nano },
                |m: &mut LogRecord| { &mut m.time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "observed_time_unix_nano",
                |m: &LogRecord| { &m.observed_time_unix_nano },
                |m: &mut LogRecord| { &mut m.observed_time_unix_nano },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SeverityNumber>>(
                "severity_number",
                |m: &LogRecord| { &m.severity_number },
                |m: &mut LogRecord| { &mut m.severity_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "severity_text",
                |m: &LogRecord| { &m.severity_text },
                |m: &mut LogRecord| { &mut m.severity_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::AnyValue>>(
                "body",
                |m: &LogRecord| { &m.body },
                |m: &mut LogRecord| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::KeyValue>>(
                "attributes",
                |m: &LogRecord| { &m.attributes },
                |m: &mut LogRecord| { &mut m.attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dropped_attributes_count",
                |m: &LogRecord| { &m.dropped_attributes_count },
                |m: &mut LogRecord| { &mut m.dropped_attributes_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "flags",
                |m: &LogRecord| { &m.flags },
                |m: &mut LogRecord| { &mut m.flags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "trace_id",
                |m: &LogRecord| { &m.trace_id },
                |m: &mut LogRecord| { &mut m.trace_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "span_id",
                |m: &LogRecord| { &m.span_id },
                |m: &mut LogRecord| { &mut m.span_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogRecord>(
                "LogRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogRecord {
        static instance: ::protobuf::rt::LazyV2<LogRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogRecord::new)
    }
}

impl ::protobuf::Clear for LogRecord {
    fn clear(&mut self) {
        self.time_unix_nano = 0;
        self.observed_time_unix_nano = 0;
        self.severity_number = SeverityNumber::SEVERITY_NUMBER_UNSPECIFIED;
        self.severity_text.clear();
        self.body.clear();
        self.attributes.clear();
        self.dropped_attributes_count = 0;
        self.flags = 0;
        self.trace_id.clear();
        self.span_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum SeverityNumber {
    SEVERITY_NUMBER_UNSPECIFIED = 0,
    SEVERITY_NUMBER_TRACE = 1,
    SEVERITY_NUMBER_TRACE2 = 2,
    SEVERITY_NUMBER_TRACE3 = 3,
    SEVERITY_NUMBER_TRACE4 = 4,
    SEVERITY_NUMBER_DEBUG = 5,
    SEVERITY_NUMBER_DEBUG2 = 6,
    SEVERITY_NUMBER_DEBUG3 = 7,
    SEVERITY_NUMBER_DEBUG4 = 8,
    SEVERITY_NUMBER_INFO = 9,
    SEVERITY_NUMBER_INFO2 = 10,
    SEVERITY_NUMBER_INFO3 = 11,
    SEVERITY_NUMBER_INFO4 = 12,
    SEVERITY_NUMBER_WARN = 13,
    SEVERITY_NUMBER_WARN2 = 14,
    SEVERITY_NUMBER_WARN3 = 15,
    SEVERITY_NUMBER_WARN4 = 16,
    SEVERITY_NUMBER_ERROR = 17,
    SEVERITY_NUMBER_ERROR2 = 18,
    SEVERITY_NUMBER_ERROR3 = 19,
    SEVERITY_NUMBER_ERROR4 = 20,
    SEVERITY_NUMBER_FATAL = 21,
    SEVERITY_NUMBER_FATAL2 = 22,
    SEVERITY_NUMBER_FATAL3 = 23,
    SEVERITY_NUMBER_FATAL4 = 24,
}

impl ::protobuf::ProtobufEnum for SeverityNumber {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SeverityNumber> {
        match value {
            0 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_UNSPECIFIED),
            1 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_TRACE),
            2 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_TRACE2),
            3 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_TRACE3),
            4 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_TRACE4),
            5 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_DEBUG),
            6 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_DEBUG2),
            7 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_DEBUG3),
            8 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_DEBUG4),
            9 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_INFO),
            10 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_INFO2),
            11 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_INFO3),
            12 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_INFO4),
            13 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_WARN),
            14 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_WARN2),
            15 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_WARN3),
            16 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_WARN4),
            17 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_ERROR),
            18 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_ERROR2),
            19 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_ERROR3),
            20 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_ERROR4),
            21 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_FATAL),
            22 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_FATAL2),
            23 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_FATAL3),
            24 => ::std::option::Option::Some(SeverityNumber::SEVERITY_NUMBER_FATAL4),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SeverityNumber] = &[
            SeverityNumber::SEVERITY_NUMBER_UNSPECIFIED,
            SeverityNumber::SEVERITY_NUMBER_TRACE,
            SeverityNumber::SEVERITY_NUMBER_TRACE2,
            SeverityNumber::SEVERITY_NUMBER_TRACE3,
            SeverityNumber::SEVERITY_NUMBER_TRACE4,
            SeverityNumber::SEVERITY_NUMBER_DEBUG,
            SeverityNumber::SEVERITY_NUMBER_DEBUG2,
            SeverityNumber::SEVERITY_NUMBER_DEBUG3,
            SeverityNumber::SEVERITY_NUMBER_DEBUG4,
            SeverityNumber::SEVERITY_NUMBER_INFO,
            SeverityNumber::SEVERITY_NUMBER_INFO2,
            SeverityNumber::SEVERITY_NUMBER_INFO3,
            SeverityNumber::SEVERITY_NUMBER_INFO4,
            SeverityNumber::SEVERITY_NUMBER_WARN,
            SeverityNumber::SEVERITY_NUMBER_WARN2,
            SeverityNumber::SEVERITY_NUMBER_WARN3,
            SeverityNumber::SEVERITY_NUMBER_WARN4,
            SeverityNumber::SEVERITY_NUMBER_ERROR,
            SeverityNumber::SEVERITY_NUMBER_ERROR2,
            SeverityNumber::SEVERITY_NUMBER_ERROR3,
            SeverityNumber::SEVERITY_NUMBER_ERROR4,
            SeverityNumber::SEVERITY_NUMBER_FATAL,
            SeverityNumber::SEVERITY_NUMBER_FATAL2,
            SeverityNumber::SEVERITY_NUMBER_FATAL3,
            SeverityNumber::SEVERITY_NUMBER_FATAL4,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SeverityNumber>("SeverityNumber", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SeverityNumber {
}

impl ::std::default::Default for SeverityNumber {
    fn default() -> Self {
        SeverityNumber::SEVERITY_NUMBER_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for SeverityNumber {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum LogRecordFlags {
    LOG_RECORD_FLAG_UNSPECIFIED = 0,
    LOG_RECORD_FLAG_TRACE_FLAGS_MASK = 255,
}

impl ::protobuf::ProtobufEnum for LogRecordFlags {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogRecordFlags> {
        match value {
            0 => ::std::option::Option::Some(LogRecordFlags::LOG_RECORD_FLAG_UNSPECIFIED),
            255 => ::std::option::Option::Some(LogRecordFlags::LOG_RECORD_FLAG_TRACE_FLAGS_MASK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LogRecordFlags] = &[
            LogRecordFlags::LOG_RECORD_FLAG_UNSPECIFIED,
            LogRecordFlags::LOG_RECORD_FLAG_TRACE_FLAGS_MASK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LogRecordFlags>("LogRecordFlags", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LogRecordFlags {
}

impl ::std::default::Default for LogRecordFlags {
    fn default() -> Self {
        LogRecordFlags::LOG_RECORD_FLAG_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for LogRecordFlags {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&opentelemetry/proto/logs/v1/logs.proto\x12\x1bopentelemetry.proto.log\
    s.v1\x1a*opentelemetry/proto/common/v1/common.proto\x1a.opentelemetry/pr\
    oto/resource/v1/resource.proto\"Z\n\x08LogsData\x12N\n\rresource_logs\
    \x18\x01\x20\x03(\x0b2).opentelemetry.proto.logs.v1.ResourceLogsR\x0cres\
    ourceLogs\"\xc3\x01\n\x0cResourceLogs\x12E\n\x08resource\x18\x01\x20\x01\
    (\x0b2).opentelemetry.proto.resource.v1.ResourceR\x08resource\x12E\n\nsc\
    ope_logs\x18\x02\x20\x03(\x0b2&.opentelemetry.proto.logs.v1.ScopeLogsR\t\
    scopeLogs\x12\x1d\n\nschema_url\x18\x03\x20\x01(\tR\tschemaUrlJ\x06\x08\
    \xe8\x07\x10\xe9\x07\"\xbe\x01\n\tScopeLogs\x12I\n\x05scope\x18\x01\x20\
    \x01(\x0b23.opentelemetry.proto.common.v1.InstrumentationScopeR\x05scope\
    \x12G\n\x0blog_records\x18\x02\x20\x03(\x0b2&.opentelemetry.proto.logs.v\
    1.LogRecordR\nlogRecords\x12\x1d\n\nschema_url\x18\x03\x20\x01(\tR\tsche\
    maUrl\"\xf3\x03\n\tLogRecord\x12$\n\x0etime_unix_nano\x18\x01\x20\x01(\
    \x06R\x0ctimeUnixNano\x125\n\x17observed_time_unix_nano\x18\x0b\x20\x01(\
    \x06R\x14observedTimeUnixNano\x12T\n\x0fseverity_number\x18\x02\x20\x01(\
    \x0e2+.opentelemetry.proto.logs.v1.SeverityNumberR\x0eseverityNumber\x12\
    #\n\rseverity_text\x18\x03\x20\x01(\tR\x0cseverityText\x12;\n\x04body\
    \x18\x05\x20\x01(\x0b2'.opentelemetry.proto.common.v1.AnyValueR\x04body\
    \x12G\n\nattributes\x18\x06\x20\x03(\x0b2'.opentelemetry.proto.common.v1\
    .KeyValueR\nattributes\x128\n\x18dropped_attributes_count\x18\x07\x20\
    \x01(\rR\x16droppedAttributesCount\x12\x14\n\x05flags\x18\x08\x20\x01(\
    \x07R\x05flags\x12\x19\n\x08trace_id\x18\t\x20\x01(\x0cR\x07traceId\x12\
    \x17\n\x07span_id\x18\n\x20\x01(\x0cR\x06spanIdJ\x04\x08\x04\x10\x05*\
    \xc3\x05\n\x0eSeverityNumber\x12\x1f\n\x1bSEVERITY_NUMBER_UNSPECIFIED\
    \x10\0\x12\x19\n\x15SEVERITY_NUMBER_TRACE\x10\x01\x12\x1a\n\x16SEVERITY_\
    NUMBER_TRACE2\x10\x02\x12\x1a\n\x16SEVERITY_NUMBER_TRACE3\x10\x03\x12\
    \x1a\n\x16SEVERITY_NUMBER_TRACE4\x10\x04\x12\x19\n\x15SEVERITY_NUMBER_DE\
    BUG\x10\x05\x12\x1a\n\x16SEVERITY_NUMBER_DEBUG2\x10\x06\x12\x1a\n\x16SEV\
    ERITY_NUMBER_DEBUG3\x10\x07\x12\x1a\n\x16SEVERITY_NUMBER_DEBUG4\x10\x08\
    \x12\x18\n\x14SEVERITY_NUMBER_INFO\x10\t\x12\x19\n\x15SEVERITY_NUMBER_IN\
    FO2\x10\n\x12\x19\n\x15SEVERITY_NUMBER_INFO3\x10\x0b\x12\x19\n\x15SEVERI\
    TY_NUMBER_INFO4\x10\x0c\x12\x18\n\x14SEVERITY_NUMBER_WARN\x10\r\x12\x19\
    \n\x15SEVERITY_NUMBER_WARN2\x10\x0e\x12\x19\n\x15SEVERITY_NUMBER_WARN3\
    \x10\x0f\x12\x19\n\x15SEVERITY_NUMBER_WARN4\x10\x10\x12\x19\n\x15SEVERIT\
    Y_NUMBER_ERROR\x10\x11\x12\x1a\n\x16SEVERITY_NUMBER_ERROR2\x10\x12\x12\
    \x1a\n\x16SEVERITY_NUMBER_ERROR3\x10\x13\x12\x1a\n\x16SEVERITY_NUMBER_ER\
    ROR4\x10\x14\x12\x19\n\x15SEVERITY_NUMBER_FATAL\x10\x15\x12\x1a\n\x16SEV\
    ERITY_NUMBER_FATAL2\x10\x16\x12\x1a\n\x16SEVERITY_NUMBER_FATAL3\x10\x17\
    \x12\x1a\n\x16SEVERITY_NUMBER_FATAL4\x10\x18*X\n\x0eLogRecordFlags\x12\
    \x1f\n\x1bLOG_RECORD_FLAG_UNSPECIFIED\x10\0\x12%\n\x20LOG_RECORD_FLAG_TR\
    ACE_FLAGS_MASK\x10\xff\x01Bs\n\x1eio.opentelemetry.proto.logs.v1B\tLogsP\
    rotoP\x01Z&go.opentelemetry.io/proto/otlp/logs/v1\xaa\x02\x1bOpenTelemet\
    ry.Proto.Logs.V1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
